import { ChatOpenAI } from "@langchain/openai";
import { PromptTemplate } from "@langchain/core/prompts";
import { StringOutputParser } from "@langchain/core/output_parsers";
import { writeFileSync } from "fs";
import { loadEnvironment, getApiKey, getEndpoint } from "../../utils/helpers";

loadEnvironment();

const model = new ChatOpenAI({
  model: "gpt-4o",
  configuration: {
    baseURL: getEndpoint("GITHUB_MODELS_ENDPOINT"),
    apiKey: getApiKey("GITHUB_MODELS_TOKEN"),
  },
  temperature: 0,
});

const specToSchema = PromptTemplate.fromTemplate(
  `You are a senior backend engineer.
  From the following product spec, extract a minimal JSON schema with fields and types.
  Only return JSON. No commentary.

  Write all the code using markdown code blocks.  

  Spec:
  {spec}`
)
  .pipe(model)
  .pipe(new StringOutputParser());

const schemaToRoutes = PromptTemplate.fromTemplate(
  `You are a senior Go developer.
  Given the JSON schema below, design REST routes and sketch idiomatic Go handlers for CRUD.
  Keep it concise, production-oriented, and show code snippets.

  Write all the code using markdown code blocks.  

  Schema JSON:
  {schema_json}`
)
  .pipe(model)
  .pipe(new StringOutputParser());

const commitMessage = PromptTemplate.fromTemplate(
  `You are a pragmatic developer.
  Write a single-line conventional commit message summarizing the new API based on the schema and routes.

  Schema:
  {schema_json}

  Routes and handlers:
  {routes}`
)
  .pipe(model)
  .pipe(new StringOutputParser());

const specText = `Fields: id (uuid), name (string, required), description (string), price (float, > 0), stock (int, >= 0).
  We must support list with pagination, create, get by id, update, delete.`;

async function main() {
  const schemaJson = await specToSchema.invoke({ spec: specText });
  const routes = await schemaToRoutes.invoke({ schema_json: schemaJson });
  const commit = await commitMessage.invoke({
    schema_json: schemaJson,
    routes,
  });

  const responseContent = `
    # Prompt Chaining Result

    ## SCHEMA (Generated by GPT-3.5-turbo)
    ${schemaJson}

    ## ROUTES & HANDLERS (Go) (Generated by GPT-5-mini)
    ${routes}

    ## COMMIT (Generated by GPT-4o-mini)
    ${commit}

    ---
    **Pipeline Models:**
    - Step 1: GPT-3.5-turbo
    - Step 2: GPT-5-mini
    - Step 3: GPT-4o-mini 
  `;

  writeFileSync("prompt_chaining_result.md", responseContent, "utf-8");

  console.log("Resultado salvo em 'prompt_chaining_result.md'");
}

main().catch(console.error);
